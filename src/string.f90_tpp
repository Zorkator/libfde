
#include "fde/itfUtil.fpp"

module fde_string
  use iso_c_binding
  use fde_ref
  use fde_memoryref
  use fde_basestring, only: BaseString_t, basestring_len_ref, &
                            attribute_permanent, attribute_volatile
  use fde_ostream
  implicit none
  private


  type, public :: String_t
    private
    type(BaseString_t) :: str

#   define _len(self)       self%str%len
#   define _reflen(self)    basestring_len_ref( self%str )
  end type


  !_TypeGen_declare_RefType( public, String, type(String_t), scalar, \
  !     initProc   = basestring_init_by_basestring_c, \
  !     assignProc = basestring_assign_basestring_c,  \
  !     deleteProc = basestring_delete_c,             \
  !     cloneMode  = _type,                           \
  !     writeExpr  = "str(self%ptr)", streaming=direct, \
  !     itemCast   = false  )


  !public :: String <= is set public by RefType declaration!
  public :: str, cptr
  public :: char
  public :: delete
  public :: set_attribute, attribute_permanent, attribute_volatile
  public :: basestring_memoryref_c

  public :: lower, to_lower
  public :: upper, to_upper
  public :: trim,  to_trimmed
  public :: strip, to_stripped
  public :: reserve
  public :: adjustl
  public :: adjustr
  public :: iachar
  public :: ichar
  public :: achar
  public :: index
  public :: len
  public :: len_trim
  public :: lge
  public :: lgt
  public :: lle
  public :: llt
  public :: assign, assignment(=)
  public :: operator(//)
  public :: operator(==)
  public :: operator(/=)
  public :: operator(<)
  public :: operator(<=)
  public :: operator(>)
  public :: operator(>=)

  ! auxiliary functions
  public :: file_basename
  public :: file_dirname


  ! interface definitions

  interface String
    function string_from_charstring( cs ) result(ds)
      import String_t
      character(len=*), intent(in) :: cs
      type(String_t)               :: ds
    end function

    function string_from_buf( buf ) result(ds)
      import String_t
      character(len=1), dimension(:), intent(in) :: buf
      type(String_t)                             :: ds
    end function
  end interface


  interface str
    function string_str( ds ) result(res)
      import String_t
      type(String_t)            :: ds
      character(len=:), pointer :: res
    end function
  end interface


  interface cptr
    function basestring_cptr( ds ) result(res)
      import String_t, c_ptr
      type(String_t), intent(in) :: ds
      type(c_ptr)                :: res
    end function
  end interface


  interface char
    function string_char( ds ) result(res)
      import String_t
      type(String_t)          :: ds
      character(len=_len(ds)) :: res
    end function

    function string_char_l( ds, length ) result(res)
      import String_t
      type(String_t)        :: ds
      integer,   intent(in) :: length
      character(len=length) :: res
    end function
  end interface


  interface delete
    subroutine basestring_delete_c( ds )
      import String_t
      type(String_t), intent(inout) :: ds
    end subroutine
  end interface


  interface set_attribute
    subroutine basestring_set_attribute( ds, attrib )
      import String_t
      type(String_t),  intent(inout) :: ds
      integer(kind=1), intent(in)    :: attrib
    end subroutine
  end interface


  interface achar
    function string_achar( ds ) result(res)
      import String_t
      type(String_t), intent(in) :: ds
      character(len=1)           :: res(_len(ds))
    end function

    function string_achar_l( ds, length ) result(res)
      import String_t
      type(String_t), intent(in) :: ds
      integer,   intent(in)      :: length
      character(len=1)           :: res(length)
    end function
  end interface


  interface lower
    function charstring_lower( cs ) result(res)
      character(len=*)       :: cs
      character(len=len(cs)) :: res
    end function

    function string_lower( ds ) result(res)
      import String_t
      type(String_t)          :: ds
      character(len=_len(ds)) :: res
    end function
  end interface


  interface upper
    function charstring_upper( cs ) result(res)
      character(len=*)       :: cs
      character(len=len(cs)) :: res
    end function

    function string_upper( ds ) result(res)
      import String_t
      type(String_t)          :: ds
      character(len=_len(ds)) :: res
    end function
  end interface


  interface trim
    function string_trim( ds ) result(res)
      import String_t
      type(String_t)            :: ds
      character(len=:), pointer :: res
    end function
  end interface


  interface strip
    function string_strip( ds ) result(res)
      import String_t
      type(String_t)            :: ds
      character(len=:), pointer :: res
    end function
  end interface


  interface to_lower
    subroutine charstring_to_lower( cs )
      character(len=*) :: cs
    end subroutine

    subroutine string_to_lower( ds )
      import String_t
      type(String_t) :: ds
    end subroutine
  end interface


  interface to_upper
    subroutine charstring_to_upper( cs )
      character(len=*) :: cs
    end subroutine

    subroutine string_to_upper( ds )
      import String_t
      type(String_t) :: ds
    end subroutine
  end interface

  
  interface to_trimmed
    subroutine basestring_trim( ds )
      import String_t
      implicit none
      type(String_t) :: ds
    end subroutine
  end interface


  interface to_stripped
    subroutine string_to_stripped( ds )
      import String_t
      implicit none
      type(String_t) :: ds
    end subroutine
  end interface


  interface reserve
    function basestring_reserve( bs, length ) result(res)
      import String_t
      type(String_t)                 :: bs
      integer                        :: length
      character(len=length), pointer :: res
    end function
  end interface


  interface adjustl
    function string_adjustl( ds ) result(res)
      import String_t
      type(String_t), intent(in) :: ds
      character(len=_len(ds))    :: res
    end function
  end interface


  interface adjustr
    function string_adjustr( ds ) result(res)
      import String_t
      type(String_t), intent(in) :: ds
      character(len=_len(ds))    :: res
    end function
  end interface


  interface iachar
    function string_iachar( ds ) result(res)
      import String_t
      type(String_t), intent(in) :: ds
      integer                    :: res(_len(ds))
    end function
  end interface


  interface ichar
    function string_ichar( ds ) result(res)
      import String_t
      type(String_t), intent(in) :: ds
      integer                    :: res(_len(ds))
    end function
  end interface


  interface index
    function string_idx_charstring( strg, sub, back ) result(res)
      import String_t
      type(String_t),    intent(in) :: strg
      character(len=*),  intent(in) :: sub
      logical, intent(in), optional :: back
      integer                           :: res
    end function

    function charstring_idx_string( strg, sub, back ) result(res)
      import String_t
      character(len=*),  intent(in) :: strg
      type(String_t),    intent(in) :: sub
      logical, optional, intent(in) :: back
      integer                       :: res
    end function

    function string_idx_string( strg, sub, back ) result(res)
      import String_t
      type(String_t),    intent(in) :: strg
      type(String_t),    intent(in) :: sub
      logical, optional, intent(in) :: back
      integer                       :: res
    end function
  end interface


  interface len
    function string_len_c( ds ) result(length)
      import String_t, c_size_t
      type(String_t), intent(in) :: ds
      integer(kind=c_size_t)     :: length
    end function
  end interface

  
  interface len_trim
    function string_len_trim_c( ds ) result(length)
      import String_t, c_size_t
      type(String_t), intent(in) :: ds
      integer(kind=c_size_t)     :: length
    end function
  end interface


  interface lge
    logical function string_lge_charstring_c( strgA, strgB )
      import String_t
      type(String_t),   intent(in) :: strgA
      character(len=*), intent(in) :: strgB
    end function

    logical function charstring_lge_string_c( strgA, strgB )
      import String_t
      character(len=*), intent(in) :: strgA
      type(String_t),   intent(in) :: strgB
    end function

    logical function string_lge_string_c( strgA, strgB )
      import String_t
      type(String_t), intent(in) :: strgA
      type(String_t), intent(in) :: strgB
    end function
  end interface


  interface lgt
    logical function string_lgt_charstring_c( strgA, strgB )
      import String_t
      type(String_t),   intent(in) :: strgA
      character(len=*), intent(in) :: strgB
    end function

    logical function charstring_lgt_string_c( strgA, strgB )
      import String_t
      character(len=*), intent(in) :: strgA
      type(String_t),   intent(in) :: strgB
    end function

    logical function string_lgt_string_c( strgA, strgB )
      import String_t
      type(String_t), intent(in) :: strgA
      type(String_t), intent(in) :: strgB
    end function
  end interface


  interface lle
    logical function string_lle_charstring_c( strgA, strgB )
      import String_t
      type(String_t),   intent(in) :: strgA
      character(len=*), intent(in) :: strgB
    end function

    logical function charstring_lle_string_c( strgA, strgB )
      import String_t
      character(len=*), intent(in) :: strgA
      type(String_t),   intent(in) :: strgB
    end function

    logical function string_lle_string_c( strgA, strgB )
      import String_t
      type(String_t), intent(in) :: strgA
      type(String_t), intent(in) :: strgB
    end function
  end interface


  interface llt
    logical function string_llt_charstring_c( strgA, strgB )
      import String_t
      type(String_t),   intent(in) :: strgA
      character(len=*), intent(in) :: strgB
    end function

    logical function charstring_llt_string_c( strgA, strgB )
      import String_t
      character(len=*), intent(in) :: strgA
      type(String_t),   intent(in) :: strgB
    end function

    logical function string_llt_string_c( strgA, strgB )
      import String_t
      type(String_t), intent(in) :: strgA
      type(String_t), intent(in) :: strgB
    end function
  end interface


  interface assign
    subroutine charstring_assign_string_c( cs, ds )
      import String_t
      character(len=*), intent(out) :: cs
      type(String_t),    intent(in) :: ds
    end subroutine

    subroutine basestring_assign_basestring_c( lhs, rhs )
      import String_t
      type(String_t), intent(inout) :: lhs
      type(String_t),    intent(in) :: rhs
    end subroutine

    subroutine basestring_assign_charstring_c( bs, cs )
      import String_t
      type(String_t), intent(inout) :: bs
      character(len=*),   intent(in)    :: cs
    end subroutine

    subroutine basestring_assign_buf( lhs, rhs )
      import String_t
      type(String_t),                 intent(inout) :: lhs
      character(len=1), dimension(:), intent(in)    :: rhs
    end subroutine
  end interface


  interface assignment(=)
    module procedure charstring_assign_string_private, string_assign_string_private
    module procedure string_assign_charstring_private, string_assign_buf_private
  end interface


  interface operator(//)
    function string_concat_charstring( lhs, rhs ) result(res)
      import String_t
      type(String_t),        intent(in) :: lhs
      character(len=*),      intent(in) :: rhs
      character(len=_len(lhs)+len(rhs)) :: res
    end function

    function charstring_concat_string( lhs, rhs ) result(res)
      import String_t
      character(len=*),      intent(in) :: lhs
      type(String_t),        intent(in) :: rhs
      character(len=len(lhs)+_len(rhs)) :: res
    end function

    function string_concat_string( lhs, rhs ) result(res)
      import String_t
      type(String_t),         intent(in) :: lhs
      type(String_t),         intent(in) :: rhs
      character(len=_len(lhs)+_len(rhs)) :: res
    end function
  end interface


  interface operator(==)
    logical function string_eq_charstring_c( lhs, rhs )
      import String_t
      type(String_t),   intent(in) :: lhs
      character(len=*), intent(in) :: rhs
    end function

    logical function charstring_eq_string_c( lhs, rhs )
      import String_t
      character(len=*), intent(in) :: lhs
      type(String_t),   intent(in) :: rhs
    end function

    logical function string_eq_string_c( lhs, rhs )
      import String_t
      type(String_t), intent(in) :: lhs
      type(String_t), intent(in) :: rhs
    end function
  end interface


  interface operator(/=)
    logical function string_ne_charstring_c( lhs, rhs )
      import String_t
      type(String_t),   intent(in) :: lhs
      character(len=*), intent(in) :: rhs
    end function

    logical function charstring_ne_string_c( lhs, rhs )
      import String_t
      character(len=*), intent(in) :: lhs
      type(String_t),   intent(in) :: rhs
    end function

    logical function string_ne_string_c( lhs, rhs )
      import String_t
      type(String_t), intent(in) :: lhs
      type(String_t), intent(in) :: rhs
    end function
  end interface


  interface operator(<) 
    logical function string_lt_charstring_c( lhs, rhs )
      import String_t
      type(String_t),   intent(in) :: lhs
      character(len=*), intent(in) :: rhs
    end function

    logical function charstring_lt_string_c( lhs, rhs )
      import String_t
      character(len=*), intent(in) :: lhs
      type(String_t),   intent(in) :: rhs
    end function

    logical function string_lt_string_c( lhs, rhs )
      import String_t
      type(String_t), intent(in) :: lhs
      type(String_t), intent(in) :: rhs
    end function
  end interface


  interface operator(<=)
    logical function string_le_charstring_c( lhs, rhs )
      import String_t
      type(String_t),   intent(in) :: lhs
      character(len=*), intent(in) :: rhs
    end function

    logical function charstring_le_string_c( lhs, rhs )
      import String_t
      character(len=*), intent(in) :: lhs
      type(String_t),   intent(in) :: rhs
    end function

    logical function string_le_string_c( lhs, rhs )
      import String_t
      type(String_t), intent(in) :: lhs
      type(String_t), intent(in) :: rhs
    end function
  end interface


  interface operator(>) 
    logical function string_gt_charstring_c( lhs, rhs )
      import String_t
      type(String_t),   intent(in) :: lhs
      character(len=*), intent(in) :: rhs
    end function

    logical function charstring_gt_string_c( lhs, rhs )
      import String_t
      character(len=*), intent(in) :: lhs
      type(String_t),   intent(in) :: rhs
    end function


    logical function string_gt_string_c( lhs, rhs )
      import String_t
      type(String_t), intent(in) :: lhs
      type(String_t), intent(in) :: rhs
    end function
  end interface


  interface operator(>=)
    logical function string_ge_charstring_c( lhs, rhs )
      import String_t
      type(String_t),   intent(in) :: lhs
      character(len=*), intent(in) :: rhs
    end function

    logical function charstring_ge_string_c( lhs, rhs )
      import String_t
      character(len=*), intent(in) :: lhs
      type(String_t),   intent(in) :: rhs
    end function

    logical function string_ge_string_c( lhs, rhs )
      import String_t
      type(String_t), intent(in) :: lhs
      type(String_t), intent(in) :: rhs
    end function
  end interface

  interface file_basename
    function string_file_basename_charstring( cs ) result(res)
      character(len=*), intent(in) :: cs
      character(len=:),    pointer :: res
    end function

    function string_file_basename_string( ds ) result(res)
      import String_t
      type(String_t)               :: ds
      character(len=:),    pointer :: res
    end function
  end interface

  interface file_dirname
    function string_file_dirname_charstring( cs ) result(res)
      character(len=*), intent(in) :: cs
      character(len=:),    pointer :: res
    end function

    function string_file_dirname_string( ds ) result(res)
      import String_t
      type(String_t)               :: ds
      character(len=:),    pointer :: res
    end function
  end interface

  
  interface
    subroutine basestring_init_by_basestring_c( ds, has_proto, proto )
      import String_t
      type(String_t), intent(inout) :: ds
      integer,        intent(in)    :: has_proto
      type(String_t), intent(in)    :: proto
    end subroutine

    subroutine basestring_memoryref_c( res, bs )
      import MemoryRef_t, String_t
      type(MemoryRef_t), intent(inout) :: res
      type(String_t),    intent(in)    :: bs
    end subroutine
  end interface

!-----------------
  contains
!-----------------

  !_TypeGen_implementAll()

!_PROC_EXPORT(charstring_assign_string_private)
  subroutine charstring_assign_string_private( lhs, rhs )
    character(len=*), intent(out) :: lhs
    type(String_t),    intent(in) :: rhs
    call assign( lhs, rhs )
  end subroutine

!_PROC_EXPORT(string_assign_string_private)
  subroutine string_assign_string_private( lhs, rhs )
    type(String_t), intent(inout) :: lhs
    type(String_t),    intent(in) :: rhs
    call assign( lhs, rhs )
  end subroutine

!_PROC_EXPORT(string_assign_charstring_private)
  subroutine string_assign_charstring_private( lhs, rhs )
    type(String_t), intent(inout) :: lhs
    character(len=*),   intent(in)    :: rhs
    call assign( lhs, rhs )
  end subroutine

!_PROC_EXPORT(string_assign_buf_private)
  subroutine string_assign_buf_private( lhs, rhs )
    type(String_t),                 intent(inout) :: lhs
    character(len=1), dimension(:), intent(in)    :: rhs
    call assign( lhs, rhs )
  end subroutine

end module

